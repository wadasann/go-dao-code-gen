// This file was generated by go-dao-code-gen. 
// You can modify it to be more suitable. 

package {{ .Pkg }}

import (
	"github.com/huandu/go-sqlbuilder"
    {{- range .Imports }}
        "{{ . }}"
    {{- end }}
)

// {{ .TableUpperCamelIdent }}Conds specifies the condition fields of the table.
type {{ .TableUpperCamelIdent }}Conds struct {
{{- range .Attrs }}
        {{ .Name }} *{{ .Type }} {{ if .Comment }}// {{ .Comment }} {{- end }} 
{{- end }}
}

// {{ .TableUpperCamelIdent }}Cond specifies the closure function for conditions.
type {{ .TableUpperCamelIdent }}Cond func(*{{ .TableUpperCamelIdent }}Conds)

// New{{ .TableUpperCamelIdent }}Conds returns a conditions entity by a list of condition functions.
func New{{ .TableUpperCamelIdent }}Conds(conds ...{{ .TableUpperCamelIdent }}Cond) {{ .TableUpperCamelIdent }}Conds {
	var o {{ .TableUpperCamelIdent }}Conds
	for _, cond := range conds {
		cond(&o)
	}
	return o
}

{{- range .Attrs }}
// Set{{ $.TableUpperCamelIdent }}{{ .NameCamelIdent }} returns a closure function for the condition on the field.
func Set{{ $.TableUpperCamelIdent }}{{ .NameCamelIdent }}({{ .NameCamel }} {{ .Type }}) {{ $.TableUpperCamelIdent }}Cond {
	return func(o *{{ $.TableUpperCamelIdent }}Conds) {
		o.{{ .Name }} = &{{ .NameCamel }}
	}
}

{{ end }}

func Build{{ .TableUpperCamelIdent }}Conds(sqlCond *sqlbuilder.Cond, conds *{{ .TableUpperCamelIdent }}Conds) (args []string) {
    if sqlCond == nil || conds == nil {
        return
    }
    {{- range .Attrs}}
        {{- if ne .Type "time.Time" }} 
            if conds.{{ .Name }} != nil {
                args = append(args, sqlCond.Equal("{{ .Tag }}", *conds.{{ .Name }}))
            }
        {{- end }}
    {{- end }}
	return args
}
